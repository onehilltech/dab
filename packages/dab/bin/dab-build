#!/usr/bin/env node

const path = require ('path');
const program = require ('commander');
const mongoose = require ('mongoose');
const debug = require ('debug')('dab:dab-build');
const fs = require ('fs-extra');
const dab = require ('../lib');
const BluebirdPromise = require ('bluebird');

const {
  mapValues
} = require ('lodash');

function writeModelsToConsole (models) {
  console.log (JSON.stringify (models));
}

function writeModelsToDirectory (models, opts) {
  let basepath = path.resolve (opts.dir);
  debug ('writing models to ' + basepath);

  return fs.ensureDir (basepath).then (() => {
    let mapped = mapValues (models, (coll, modelName) => {
      debug (`writing values for model ${modelName}`);
      const collectionName = opts.mapping && opts.mapping[modelName] ? opts.mapping[modelName] : modelName;

      // Create a write stream to the target file for the models in the collection.
      const fileName = path.resolve (basepath, `${collectionName}.json`);
      let writeStream = fs.createWriteStream (fileName, {flags: 'w'});

      let promises = coll.map (item => {
        const json = JSON.stringify (item);
        return writeStream.write (`${json}\n`);
      });

      return Promise.all (promises);
    });

    return BluebirdPromise.props (mapped);
  });
}

program
  .arguments ('<file>')
  .option ('-o, --dir <dir>', 'output directory')
  .option ('-m, --mapping <file>', 'model to collection mapping')
  .option ('-c, --connection-string <connstr>', 'connection string for database')
  .action (runCommand);

program.parse (process.argv);

function openConnection () {
  if (!program.connstr)
    return Promise.resolve ();

  let conn = mongoose.createConnection ();
  return conn.openUri (program.connstr);
}

function runCommand (file) {
  let filename = path.resolve (file);
  debug (`dabbing using ${filename}`);

  // Load the dab file.
  let data = require (filename);

  openConnection ().then (conn => {
    return dab.build (data).then (data => {
      if (program.dir) {
        let opts = {
          dir: program.dir,
        };

        if (program.mapping) {
          const importFile = path.isAbsolute (program.mapping) ? program.mapping : path.resolve (process.cwd (), program.mapping);
          opts.mapping = require (importFile);
        }

        return writeModelsToDirectory (data, opts);
      }
      else {
        return writeModelsToConsole (data);
      }
    }).then (() => {
      if (conn)
        return conn.close ();
    }).catch (err => {
      console.error (err)
    });
  });
}
