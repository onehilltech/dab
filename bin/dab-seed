#!/usr/bin/env node

const path = require ('path');
const program = require ('commander');
const debug = require ('debug')('dab:dab-seed');
const fs = require ('fs-extra');
const dab = require ('../lib');
const BluebirdPromise = require ('bluebird');

const {
  forOwn,
  mapValues,
  get
} = require ('lodash');

const {
  MongoClient
} = require ('mongodb');

const mongoose = require ('mongoose');

program
  .arguments ('<file>')
  .option ('-m, --mapping <file>', 'model to collection mapping')
  .option ('-c, --connection <connstr>', 'connection string for database')
  .option ('--clear', 'clear collections before seeding')
  .action (runCommand);

program.parse (process.argv);

function seed (db, models, opts) {
  let mapped = mapValues (models, (entries, modelName) => {
    // Get the collection for this set of models.
    let collectionName = get (opts, `mapping.${modelName}`, modelName);
    let coll = db.collection (collectionName);

    function clear () {
      if (opts.clear) {
        debug ('clearing values in collection %s', collectionName);
        return coll.deleteMany ();
      }
      else {
        return Promise.resolve ();
      }
    }

    return clear ().then (() => {
      debug (`writing values for model ${modelName} => ${collectionName}`);
      return coll.insert (entries, {w: 1});
    });
  });

  return BluebirdPromise.props (mapped);
}

function runCommand (file) {
  let filename = path.resolve (file);

  debug ('dabbing using ' + filename);

  // Load the dab file.
  let data = require (filename);

  let conn = mongoose.createConnection ();

  return conn.openUri (program.connection)
    .then (() => {
      debug ('building data model');
      return dab.build (data);
    })
    .then (data => {
      let opts = {clear: !!program.clear};

      if (program.mapping) {
        const mappingFile = path.isAbsolute (program.mapping) ? program.mapping : path.resolve (process.cwd (), program.mapping);
        debug ('using mapping ', mappingFile);

        opts.mapping = require (mappingFile);
      }

      debug ('seeding the database');
      return seed (conn.db, data, opts);
    })
    .catch (err => {
      console.log (err);
    })
    .then (() => {
      return conn.close ();
    });
}
