#!/usr/bin/env node
'use strict';

const async = require ('async')
  , path    = require ('path')
  , program = require ('commander')
  , debug   = require ('debug')('dab:dab-build')
  , fs      = require ('fs')
  , dab     = require ('../lib')
  ;

function writeModelsToConsole (models, callback) {
  console.log (JSON.stringify (models));
  return callback (null);
}

function writeModelsToDirectory (models, dir, callback) {
  let fullpath = path.resolve (dir);
  debug ('writing models to ' + fullpath);

  async.eachOf (models, (coll, modelName, callback) => {
    debug ('writing values for model %s', modelName);

    // Create a write stream to the target file for the models in the collection.
    const fileName = path.resolve (dir, modelName + '.json');
    let writeStream = fs.createWriteStream (fileName, { flags : 'w' });

    async.each (coll, (item, callback) => {
      const json = JSON.stringify (item);
      writeStream.write (`${json}\n`);

      return callback (null);
    }, done);

    function done (err) {
      writeStream.end ();
      return callback (err);
    }
  }, callback);
}

function runCommand (file) {
  let filename = path.resolve (file);
  debug ('dabbing using ' + filename);

  // Load the dab file.
  let data = require (filename);

  function complete (err) {
    if (err)
      return console.error (err);
  }

  async.waterfall ([
    function (callback) {
      dab.build (data, callback);
    },

    function (models, callback) {
      if (program.dir) {
        writeModelsToDirectory (models, program.dir, callback);
      }
      else {
        writeModelsToConsole (models, callback);
      }
    }
  ], complete);
}

program
  .arguments ('<file>')
  .option ('-o, --dir <dir>', 'output directory')
  .option ('-m, --mapping <file>', 'model to collection mapping')
  .action (runCommand);

program.parse (process.argv);
